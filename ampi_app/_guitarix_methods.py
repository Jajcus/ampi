
"""
Guitarix JSON-RPC methods

AUTOGENERATED DO NOT EDIT."""

class GuitarixMethods:
    def __init__(self, client):
        self._client = client

    def getversion(self, *args):
        return self._client.call('getversion', *args)
    def shutdown(self, *args):
        self._client.notify('shutdown', *args)
    def listen(self, *args):
        self._client.notify('listen', *args)
    def unlisten(self, *args):
        self._client.notify('unlisten', *args)
    def getstate(self, *args):
        return self._client.call('getstate', *args)
    def setstate(self, *args):
        self._client.notify('setstate', *args)
    def jack_cpu_load(self, *args):
        return self._client.call('jack_cpu_load', *args)
    def get_jack_load_status(self, *args):
        return self._client.call('get_jack_load_status', *args)
    def set_jack_insert(self, *args):
        self._client.notify('set_jack_insert', *args)
    def get(self, *args):
        return self._client.call('get', *args)
    def set(self, *args):
        self._client.notify('set', *args)
    def parameterlist(self, *args):
        return self._client.call('parameterlist', *args)
    def get_parameter(self, *args):
        return self._client.call('get_parameter', *args)
    def get_parameter_value(self, *args):
        return self._client.call('get_parameter_value', *args)
    def desc(self, *args):
        return self._client.call('desc', *args)
    def list(self, *args):
        return self._client.call('list', *args)
    def insert_param(self, *args):
        self._client.notify('insert_param', *args)
    def banks(self, *args):
        return self._client.call('banks', *args)
    def setpreset(self, *args):
        self._client.notify('setpreset', *args)
    def set_online_presets(self, *args):
        self._client.notify('set_online_presets', *args)
    def create_default_scratch_preset(self, *args):
        self._client.notify('create_default_scratch_preset', *args)
    def sendcc(self, *args):
        self._client.notify('sendcc', *args)
    def bank_insert_content(self, *args):
        return self._client.call('bank_insert_content', *args)
    def bank_insert_new(self, *args):
        return self._client.call('bank_insert_new', *args)
    def get_bank(self, *args):
        return self._client.call('get_bank', *args)
    def rename_bank(self, *args):
        return self._client.call('rename_bank', *args)
    def bank_remove(self, *args):
        return self._client.call('bank_remove', *args)
    def bank_get_contents(self, *args):
        return self._client.call('bank_get_contents', *args)
    def bank_reorder(self, *args):
        self._client.notify('bank_reorder', *args)
    def bank_check_reparse(self, *args):
        return self._client.call('bank_check_reparse', *args)
    def bank_get_filename(self, *args):
        return self._client.call('bank_get_filename', *args)
    def bank_set_flag(self, *args):
        self._client.notify('bank_set_flag', *args)
    def convert_preset(self, *args):
        return self._client.call('convert_preset', *args)
    def bank_save(self, *args):
        self._client.notify('bank_save', *args)
    def pf_save(self, *args):
        self._client.notify('pf_save', *args)
    def save_current(self, *args):
        self._client.notify('save_current', *args)
    def save_preset(self, *args):
        self._client.notify('save_preset', *args)
    def presets(self, *args):
        return self._client.call('presets', *args)
    def rename_preset(self, *args):
        return self._client.call('rename_preset', *args)
    def reorder_preset(self, *args):
        self._client.notify('reorder_preset', *args)
    def erase_preset(self, *args):
        self._client.notify('erase_preset', *args)
    def pf_append(self, *args):
        self._client.notify('pf_append', *args)
    def pf_insert_before(self, *args):
        self._client.notify('pf_insert_before', *args)
    def pf_insert_after(self, *args):
        self._client.notify('pf_insert_after', *args)
    def plugin_preset_list_load(self, *args):
        return self._client.call('plugin_preset_list_load', *args)
    def plugin_preset_list_sync_set(self, *args):
        self._client.notify('plugin_preset_list_sync_set', *args)
    def plugin_preset_list_set(self, *args):
        self._client.notify('plugin_preset_list_set', *args)
    def plugin_preset_list_save(self, *args):
        self._client.notify('plugin_preset_list_save', *args)
    def plugin_preset_list_remove(self, *args):
        self._client.notify('plugin_preset_list_remove', *args)
    def pluginlist(self, *args):
        return self._client.call('pluginlist', *args)
    def plugin_load_ui(self, *args):
        return self._client.call('plugin_load_ui', *args)
    def get_rack_unit_order(self, *args):
        return self._client.call('get_rack_unit_order', *args)
    def insert_rack_unit(self, *args):
        self._client.notify('insert_rack_unit', *args)
    def remove_rack_unit(self, *args):
        self._client.notify('remove_rack_unit', *args)
    def queryunit(self, *args):
        return self._client.call('queryunit', *args)
    def get_midi_controller_map(self, *args):
        return self._client.call('get_midi_controller_map', *args)
    def midi_size(self, *args):
        return self._client.call('midi_size', *args)
    def midi_deleteParameter(self, *args):
        self._client.notify('midi_deleteParameter', *args)
    def midi_modifyCurrent(self, *args):
        self._client.notify('midi_modifyCurrent', *args)
    def midi_get_config_mode(self, *args):
        return self._client.call('midi_get_config_mode', *args)
    def midi_set_config_mode(self, *args):
        self._client.notify('midi_set_config_mode', *args)
    def midi_set_current_control(self, *args):
        self._client.notify('midi_set_current_control', *args)
    def request_midi_value_update(self, *args):
        self._client.notify('request_midi_value_update', *args)
    def get_tuning(self, *args):
        return self._client.call('get_tuning', *args)
    def get_tuner_freq(self, *args):
        return self._client.call('get_tuner_freq', *args)
    def switch_tuner(self, *args):
        self._client.notify('switch_tuner', *args)
    def tuner_used_for_display(self, *args):
        self._client.notify('tuner_used_for_display', *args)
    def get_max_input_level(self, *args):
        return self._client.call('get_max_input_level', *args)
    def get_max_output_level(self, *args):
        return self._client.call('get_max_output_level', *args)
    def set_oscilloscope_mul_buffer(self, *args):
        self._client.notify('set_oscilloscope_mul_buffer', *args)
    def get_oscilloscope_mul_buffer(self, *args):
        return self._client.call('get_oscilloscope_mul_buffer', *args)
    def clear_oscilloscope_buffer(self, *args):
        self._client.notify('clear_oscilloscope_buffer', *args)
    def get_oscilloscope_info(self, *args):
        return self._client.call('get_oscilloscope_info', *args)
    def reload_impresp_list(self, *args):
        self._client.notify('reload_impresp_list', *args)
    def load_impresp_dirs(self, *args):
        return self._client.call('load_impresp_dirs', *args)
    def read_audio(self, *args):
        return self._client.call('read_audio', *args)
    def load_ladspalist(self, *args):
        return self._client.call('load_ladspalist', *args)
    def save_ladspalist(self, *args):
        self._client.notify('save_ladspalist', *args)
    def ladspaloader_update_plugins(self, *args):
        return self._client.call('ladspaloader_update_plugins', *args)
    def get_tuner_switcher_active(self, *args):
        return self._client.call('get_tuner_switcher_active', *args)
    def tuner_switcher_activate(self, *args):
        self._client.notify('tuner_switcher_activate', *args)
    def tuner_switcher_deactivate(self, *args):
        self._client.notify('tuner_switcher_deactivate', *args)
    def tuner_switcher_toggle(self, *args):
        self._client.notify('tuner_switcher_toggle', *args)
